#ifndef MANTLE_WSI_WIN_EXT_H_
#define MANTLE_WSI_WIN_EXT_H_

#include "mantle.h"

#ifdef __cplusplus
extern "C" {
#endif

// Types

MANTLE_HANDLE(GR_WSI_WIN_DISPLAY);

// Constants

#define GR_MAX_DEVICE_NAME_LEN 32
#define GR_MAX_GAMMA_RAMP_CONTROL_POINTS 1025

// Enumerations

typedef enum _GR_WSI_WIN_IMAGE_STATE
{
    GR_WSI_WIN_IMAGE_STATE_PRESENT_WINDOWED = 0x00200000,
    GR_WSI_WIN_IMAGE_STATE_PRESENT_FULLSCREEN = 0x00200001,
} GR_WSI_WIN_IMAGE_STATE;

typedef enum _GR_WSI_WIN_INFO_TYPE
{
    GR_WSI_WIN_INFO_TYPE_QUEUE_PROPERTIES = 0x00206800,
    GR_WSI_WIN_INFO_TYPE_DISPLAY_PROPERTIES = 0x00206801,
    GR_WSI_WIN_INFO_TYPE_GAMMA_RAMP_CAPABILITIES = 0x00206802,
    GR_WSI_WIN_INFO_TYPE_DISPLAY_FREESYNC_SUPPORT = 0x00206803,
    GR_WSI_WIN_INFO_TYPE_PRESENTABLE_IMAGE_PROPERTIES = 0x00206804,
    GR_WSI_WIN_INFO_TYPE_EXTENDED_DISPLAY_PROPERTIES = 0x00206805,
} GR_WSI_WIN_INFO_TYPE;

typedef enum _GR_WSI_WIN_PRESENT_MODE
{
    GR_WSI_WIN_PRESENT_MODE_WINDOWED = 0x00200200,
    GR_WSI_WIN_PRESENT_MODE_FULLSCREEN = 0x00200201,
} GR_WSI_WIN_PRESENT_MODE;

typedef enum _GR_WSI_WIN_RESULT
{
	GR_WSI_WIN_PRESENT_OCCLUDED = 0x21000,
	GR_WSI_WIN_ERROR_FULLSCREEN_UNAVAILABLE,
	GR_WSI_WIN_ERROR_DISPLAY_REMOVED,
	GR_WSI_WIN_ERROR_INCOMPATIBLE_DISPLAY_MODE,
	GR_WSI_WIN_ERROR_MULTI_DEVICE_PRESENT_FAILED,
	GR_WSI_WIN_ERROR_WINDOWED_PRESENT_UNAVAILABLE,
	GR_WSI_WIN_ERROR_INVALID_RESOLUTION
} GR_WSI_WIN_RESULT;

typedef enum _GR_WSI_WIN_ROTATION_ANGLE
{
    GR_WSI_WIN_ROTATION_ANGLE_0 = 0x00200100,
    GR_WSI_WIN_ROTATION_ANGLE_90 = 0x00200101,
    GR_WSI_WIN_ROTATION_ANGLE_180 = 0x00200102,
    GR_WSI_WIN_ROTATION_ANGLE_270 = 0x00200103,
} GR_WSI_WIN_ROTATION_ANGLE;

// Flags

typedef enum _GR_WSI_WIN_EXTENDED_DISPLAY_FLAGS
{
    GR_WSI_WIN_WINDOWED_VBLANK_WAIT = 0x00000001,
    GR_WSI_WIN_WINDOWED_GET_SCANLINE = 0x00000002,
} GR_WSI_WIN_EXTENDED_DISPLAY_FLAGS;

typedef enum _GR_WSI_WIN_IMAGE_CREATE_FLAGS
{
    GR_WSI_WIN_IMAGE_CREATE_FULLSCREEN_PRESENT = 0x00000001,
    GR_WSI_WIN_IMAGE_CREATE_STEREO = 0x00000002,
} GR_WSI_WIN_IMAGE_CREATE_FLAGS;

typedef enum _GR_WSI_WIN_PRESENT_FLAGS
{
    GR_WSI_WIN_PRESENT_FULLSCREEN_DONOTWAIT = 0x00000001,
    GR_WSI_WIN_PRESENT_FULLSCREEN_STEREO = 0x00000002,
} GR_WSI_WIN_PRESENT_FLAGS;

typedef enum _GR_WSI_WIN_PRESENT_SUPPORT_FLAGS
{
    GR_WSI_WIN_FULLSCREEN_PRESENT_SUPPORTED = 0x00000001,
    GR_WSI_WIN_WINDOWED_PRESENT_SUPPORTED = 0x00000002,
} GR_WSI_WIN_PRESENT_SUPPORT_FLAGS;

// Data Structures

typedef struct _GR_RGB_FLOAT
{
    GR_FLOAT red;
    GR_FLOAT green;
    GR_FLOAT blue;
} GR_RGB_FLOAT;

typedef struct _GR_WSI_WIN_DISPLAY_MODE
{
    GR_EXTENT2D extent;
    GR_FORMAT format;
    GR_UINT refreshRate;
    GR_BOOL stereo;
    GR_BOOL crossDisplayPresent;
} GR_WSI_WIN_DISPLAY_MODE;

typedef struct _GR_WSI_WIN_DISPLAY_PROPERTIES
{
    void* hMonitor; // HMONITOR
    GR_CHAR displayName[GR_MAX_DEVICE_NAME_LEN];
    GR_RECT desktopCoordinates;
    GR_ENUM rotation;
} GR_WSI_WIN_DISPLAY_PROPERTIES;

typedef struct _GR_WSI_WIN_EXTENDED_DISPLAY_PROPERTIES
{
    GR_FLAGS extendedProperties;
} GR_WSI_WIN_EXTENDED_DISPLAY_PROPERTIES;

typedef struct _GR_WSI_WIN_GAMMA_RAMP
{
    GR_RGB_FLOAT scale;
    GR_RGB_FLOAT offset;
    GR_RGB_FLOAT gammaCurve[GR_MAX_GAMMA_RAMP_CONTROL_POINTS];
} GR_WSI_WIN_GAMMA_RAMP;

typedef struct _GR_WSI_WIN_GAMMA_RAMP_CAPABILITIES
{
    GR_BOOL supportsScaleAndOffset;
    GR_FLOAT minConvertedValue;
    GR_FLOAT maxConvertedValue;
    GR_UINT controlPointCount;
    GR_FLOAT controlPointPositions[GR_MAX_GAMMA_RAMP_CONTROL_POINTS];
} GR_WSI_WIN_GAMMA_RAMP_CAPABILITIES;

typedef struct _GR_WSI_WIN_PRESENT_INFO
{
    void* hWndDest; // HWND
    GR_IMAGE srcImage;
    GR_ENUM presentMode;
    GR_UINT presentInterval;
    GR_FLAGS flags;
} GR_WSI_WIN_PRESENT_INFO;

typedef struct _GR_WSI_WIN_PRESENTABLE_IMAGE_CREATE_INFO
{
    GR_FORMAT format;
    GR_FLAGS usage;
    GR_EXTENT2D extent;
    GR_WSI_WIN_DISPLAY display;
    GR_FLAGS flags;
} GR_WSI_WIN_PRESENTABLE_IMAGE_CREATE_INFO;

typedef struct _GR_WSI_WIN_PRESENTABLE_IMAGE_PROPERTIES
{
    GR_WSI_WIN_PRESENTABLE_IMAGE_CREATE_INFO createInfo;
    GR_GPU_MEMORY mem;
} GR_WSI_WIN_PRESENTABLE_IMAGE_PROPERTIES;

typedef struct _GR_WSI_WIN_QUEUE_PROPERTIES
{
    GR_FLAGS presentSupport;
} GR_WSI_WIN_QUEUE_PROPERTIES;

// Functions

GR_RESULT GR_STDCALL grWsiWinGetDisplays(
    GR_DEVICE device,
    GR_UINT* pDisplayCount,
    GR_WSI_WIN_DISPLAY* pDisplayList);

GR_RESULT GR_STDCALL grWsiWinGetDisplayModeList(
    GR_WSI_WIN_DISPLAY display,
    GR_UINT* pDisplayModeCount,
    GR_WSI_WIN_DISPLAY_MODE* pDisplayModeList);

GR_RESULT GR_STDCALL grWsiWinTakeFullscreenOwnership(
    GR_WSI_WIN_DISPLAY display,
    GR_IMAGE image);

GR_RESULT GR_STDCALL grWsiWinReleaseFullscreenOwnership(
    GR_WSI_WIN_DISPLAY display);

GR_RESULT GR_STDCALL grWsiWinSetGammaRamp(
    GR_WSI_WIN_DISPLAY display,
    const GR_WSI_WIN_GAMMA_RAMP* pGammaRamp);

GR_RESULT GR_STDCALL grWsiWinWaitForVerticalBlank(
    GR_WSI_WIN_DISPLAY display);

GR_RESULT GR_STDCALL grWsiWinGetScanLine(
    GR_WSI_WIN_DISPLAY display,
    GR_INT* pScanLine);

GR_RESULT GR_STDCALL grWsiWinCreatePresentableImage(
    GR_DEVICE device,
    const GR_WSI_WIN_PRESENTABLE_IMAGE_CREATE_INFO* pCreateInfo,
    GR_IMAGE* pImage,
    GR_GPU_MEMORY* pMem);

GR_RESULT GR_STDCALL grWsiWinQueuePresent(
    GR_QUEUE queue,
    const GR_WSI_WIN_PRESENT_INFO* pPresentInfo);

GR_RESULT GR_STDCALL grWsiWinSetMaxQueuedFrames(
    GR_DEVICE device,
    GR_UINT maxFrames);

#ifdef __cplusplus
}
#endif

#endif // MANTLE_WSI_WIN_EXT_H_
